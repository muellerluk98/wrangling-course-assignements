# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(dplyr)
library(tidyr)
library(tibble)
library(faux)
library(dplyr)
library(tidyr)
library(tibble)
install.packages("faux")
library(faux)
library(dplyr)
library(tidyr)
library(tibble)
devtools::install.github("debruine/faux")
library(dplyr)
library(tidyr)
library(tibble)
devtools::install_github("debruine/faux")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(dplyr)
library(tidyr)
library(tibble)
install.packages("devtools")
devtools::install_github("debruine/faux")
library(faux)
library(janitor)
library(ggplot2)
library(scales)
library(psych)
library(readr)
library(knitr)
library(kableExtra)
# set seed for reproducibility
set.seed(123)
# generate data
data_wide <-
faux::rnorm_multi(n = 100,
vars = 5,
mu = 3,
sd = 1,
r = 0.5,
varnames = paste0("item_", 1:5),
empirical = FALSE) %>%
rownames_to_column(var = "id")
# recode responses less than 1 or more than 5 to those values, then round scores to whole numbers
# note that {faux} has functions for doing this better
data_wide_likert <- data_wide %>%
mutate(across(starts_with("item_"), ~ round_half_up(.x, digits = 0))) %>%
mutate(across(starts_with("item_"), ~ ifelse(.x < 1, 1, ifelse(.x > 5, 5, .x))))
View(data_wide_likert)
res_alpha <- data_wide_likert %>%
select(starts_with("item_")) %>%
psych::alpha()
cronbachs_alpha_estimate <- res_alpha$total$raw_alpha |>
round_half_up(digits = 2)
View(data_wide_likert)
View(res_alpha)
`r cronbachs_alpha_estimate`
Cronbach's $\alpha$ = `r cronbachs_alpha_estimate`
res_alpha <- data_wide_likert %>%
select(starts_with("item_")) %>%
psych::alpha()
cronbachs_alpha_estimate <- res_alpha$total$raw_alpha |>
round_half_up(digits = 2)
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(dplyr)
library(tidyr)
library(tibble)
install.packages("devtools")
devtools::install_github("debruine/faux")
library(faux)
library(janitor)
library(ggplot2)
library(scales)
library(psych)
library(readr)
library(knitr)
library(kableExtra)
# set seed for reproducibility
set.seed(123)
# generate data
data_wide <-
faux::rnorm_multi(n = 100,
vars = 5,
mu = 3,
sd = 1,
r = 0.5,
varnames = paste0("item_", 1:5),
empirical = FALSE) %>%
rownames_to_column(var = "id")
# recode responses less than 1 or more than 5 to those values, then round scores to whole numbers
# note that {faux} has functions for doing this better
data_wide_likert <- data_wide %>%
mutate(across(starts_with("item_"), ~ round_half_up(.x, digits = 0))) %>%
mutate(across(starts_with("item_"), ~ ifelse(.x < 1, 1, ifelse(.x > 5, 5, .x))))
Cronbach's $\alpha$ = `r cronbachs_alpha_estimate`
res_alpha <- data_wide_likert %>%
select(starts_with("item_")) %>%
psych::alpha()
cronbachs_alpha_estimate <- res_alpha$total$raw_alpha |>
round_half_up(digits = 2)
res_alpha <- data_wide_likert %>%
select(starts_with("item_")) %>%
psych::alpha()
cronbachs_alpha_estimate <- res_alpha$total$raw_alpha |>
round_half_up(digits = 2)
Cronbach's $\alpha$ = `r cronbachs_alpha_estimate`
Cronbach's $\alpha$ = `r cronbachs_alpha_estimate`
ggplot(data_wide_likert, aes(x = item_1)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_2)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_3)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_4)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_5)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
data_long <- data_wide_likert %>%
pivot_longer(cols = starts_with("item_"),
names_to = "item",
values_to = "response")
ggplot(data_long, aes(x = response)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw() +
facet_wrap(~ item)
View(data_wide_likert)
View(data_long)
View(data_long)
data_long <- data_wide_likert %>%
pivot_longer(cols = starts_with("item_"),
names_to = "item",
values_to = "response")
View(data_long)
ggplot(data_long, aes(x = response)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_long, aes(x = response)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw() +
facet_wrap(~ item)
sum_scores <- data_long %>%
group_by(id) %>%
summarise(sum_score = sum(response))
ggplot(sum_scores, aes(x = sum_score)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
scale_x_continuous(breaks = breaks_pretty(n = 10)) +
theme_linedraw()
sum_scores <- data_long %>%
group_by(id) %>%
summarise(sum_score = sum(response))
ggplot(sum_scores, aes(x = sum_score)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
scale_x_continuous(breaks = breaks_pretty(n = 10)) +
theme_linedraw()
sum_scores <- data_long %>%
group_by(id) %>%
summarise(sum_score = sum(response))
ggplot(sum_scores, aes(x = sum_score)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
scale_x_continuous(breaks = breaks_pretty(n = 10)) +
theme_linedraw()
View(sum_scores)
View(data_wide)
View(data_wide_likert)
data_wide_again <- data_long %>%
pivot_wider(names_from = item,
values_from = response)
View(data_wide_again)
# first I have to load the data
demographics -> read.csv(../../raw/data_demographics_raw)
# first I have to load the data
demographics -> read.csv(../raw/data_demographics_raw)
# first I have to load the data
demographics <- read_csv(file = "../data/raw/data_demographics_raw.csv")
library(dplyr)
library(tidyr)
library(tibble)
install.packages("devtools")
devtools::install_github("debruine/faux")
library(faux)
library(janitor)
library(ggplot2)
library(scales)
library(psych)
library(readr)
library(knitr)
library(kableExtra)
# first I have to load the data
demographics <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# second I look at the data
show(demographics)
View(demographics)
# third I check if the data is in long or in wide format
dim(demographics)  # Gibt Zeilen und Spaltenanzahl aus
View(demographics)
# first I have to load the data
demographics <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# second I look at the data
show(demographics)
# third I check if the data is in long or in wide format --> Datensatz ist im Long Format
dim(demographics)  # Gibt Zeilen und Spaltenanzahl aus
# Umwandlung von Long- zu Wide-Format
demographics_wide <- demographics %>%
pivot_wider(
names_from = trialcode,  # Die Spalte, deren Werte neue Spaltennamen werden
values_from = response   # Die Spalte, deren Werte in die neuen Spalten kommen
)
View(demographics_wide)
View(demographics_wide)
# jetzt möchte ich, dass
demographics_wide <- demographics_wide %>%
mutate(age = (as.numeric(age))
View(demographics_wide)
View(demographics_wide)
# jetzt möchte ich, dass
demographics_wide <- demographics_wide %>%
mutate(age = (as.numeric(age)))
View(demographics_wide)
# 1 kleiner sanity check: Antworten und Häufigkeiten in der Spalte "age" anzeigen
demographics_wide %>%
count(age, sort = TRUE)  # Zählt alle Werte und sortiert nach Häufigkeit
# zuerst schaue ich mal was es denn so für Antworten in der Sparte gender hat und lass mir diese anzeigen
demographics_wide %>%
count(gender, sort = TRUE)  # Zählt alle Werte und sortiert nach Häufigkeit
# jetzt wranglen wir die gender variable
demographics_wide <- demographics_wide %>%
mutate(
gender = tolower(gender),  # Standardisierung
gender = case_when(
gender %in% c("male", "man", "m") ~ 1,
gender %in% c("female", "woman", "f") ~ 2,
gender %in% c("non-binary", "non binary", "nb") ~ 3,
TRUE ~ NA_real_
)
)
View(demographics_wide)
# Zeilen entfernen, bei denen sowohl "gender" als auch "age" NA sind
demographics_wide_withoutNAs <- demographics_wide %>%
filter(!(is.na(gender) & is.na(age)))
View(demographics_wide_withoutNAs)
# Datensatz auf die gewünschten Spalten reduzieren --> nur noch subject age und gender
demographics_wide_withoutNAs <- demographics_wide_withoutNAs %>%
select(subject, age, gender)
View(demographics_wide_withoutNAs)
# now we go from long to wide format so that every subject has one line
demographics_clean <- demographics_wide_withoutNAs %>%
group_by(subject) %>%  # Gruppiere nach Versuchsperson
summarise(
age = first(age),  # Das erste Alter (sollte eindeutig sein)
gender = first(gender)  # Das erste Gender (sollte eindeutig sein)
) %>%
ungroup()  # Gruppierung aufheben
View(demographics_wide_withoutNAs)
View(demographics_clean)
# Jede Versuchsperson in einer Zeile, sicherstellen, dass gender korrekt übernommen wird
demographics_clean <- demographics_wide %>%
group_by(subject) %>%  # Gruppierung nach Versuchsperson
summarise(
age = first(age, na.rm = TRUE),  # Erstes nicht-NA Alter
gender = first(gender[!is.na(gender)])  # Erstes nicht-NA Geschlecht
) %>%
ungroup()  # Gruppierung aufheben
# Jede Versuchsperson in einer Zeile, sicherstellen, dass gender korrekt übernommen wird
demographics_clean <- demographics_wide %>%
group_by(subject) %>%  # Gruppierung nach Versuchsperson
summarise(
age = first(age, na.rm = TRUE),  # Erstes nicht-NA Alter
gender = first(gender[!is.na(gender)])  # Erstes nicht-NA Geschlecht
) %>%
ungroup()  # Gruppierung aufheben
View(demographics_wide_withoutNAs)
# now we go from long to wide format so that every subject has one line
demographics_clean <- demographics_wide %>%
group_by(subject) %>%  # Gruppiere nach `subject`
summarise(
age = max(age, na.rm = TRUE),       # Wähle den maximalen Wert für `age`, ignoriere NAs
gender = max(gender, na.rm = TRUE)  # Wähle den maximalen Wert für `gender`, ignoriere NAs
) %>%
ungroup()  # Gruppierung aufheben
# now we go from long to wide format so that every subject has one line
demographics_clean <- demographics_wide_withoutNAs %>%
group_by(subject) %>%  # Gruppiere nach `subject`
summarise(
age = max(age, na.rm = TRUE),       # Wähle den maximalen Wert für `age`, ignoriere NAs
gender = max(gender, na.rm = TRUE)  # Wähle den maximalen Wert für `gender`, ignoriere NAs
) %>%
ungroup()  # Gruppierung aufheben
View(demographics_clean)
