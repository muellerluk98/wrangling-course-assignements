# dir.create()
# Erstellen eines neuen Verzeichnisses "Projektdaten"
dir.create("Projektdaten")
# Überprüfen, ob das Verzeichnis erfolgreich erstellt wurde
if (dir.exists("Projektdaten")) {
print("Das Verzeichnis wurde erfolgreich erstellt.")
} else {
print("Das Verzeichnis konnte nicht erstellt werden.")
}
# colnames()
df <- data.frame(Age = c(25, 30), Name = c("Anna", "Bert"))
colnames(df)
# dput(colnames())
# colnames()
df <- data.frame(Age = c(25, 30), Name = c("Anna", "Bert"))
colnames(df) # Anzeige der Spaltennamen
colnames(df) <- c("Alter", "Vorname")  # Hinzufügen von zusätzlichen Spalten
colnames(df)
# dput(colnames())
# colnames()
df <- data.frame(Age = c(25, 30), Name = c("Anna", "Bert"))
colnames(df) # Anzeige der Spaltennamen
colnames(df) <- c("Alter", "Vorname")  # Hinzufügen von zusätzlichen Spalten
colnames(df)
# dput(colnames())
dput(colnames(df)) # Dies gibt die Spaltennamen als R-freundlichen Code aus, den du in anderen Skripten oder in einer neuen R-Sitzung verwenden kannst.
# Beispiel mit %>%
df <- data.frame(Zahlen = 1:5)
df %>%
mutate(Quadrat = Zahlen^2) %>%
filter(Quadrat > 10)
# %>%
# Beispiel mit %>%
df <- data.frame(Zahlen = 1:5)
df %>%
mutate(Quadrat = Zahlen^2) %>%
filter(Quadrat > 10)
# |>
# Beispiel mit |>
df <- data.frame(Zahlen = 1:5)
df |>
transform(Quadrat = Zahlen^2) |>
subset(Quadrat > 10)
# janitor::round_half_up()
# Mit der Standard-R-Funktion round()
round(2.5)  # Gibt 2 zurück (Banker's Rounding)
round(3.5)  # Gibt 4 zurück
# Mit round_half_up aus dem janitor Paket
round_half_up(2.5)  # Gibt 3 zurück
library(readr)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(janitor)
# janitor::round_half_up()
# Mit der Standard-R-Funktion round()
round(2.5)  # Gibt 2 zurück (Banker's Rounding)
round(3.5)  # Gibt 4 zurück
# Mit round_half_up aus dem janitor Paket
round_half_up(2.5)  # Gibt 3 zurück
round_half_up(3.5)  # Gibt 4 zurück
# janitor::clean_names()
clean_names(df)
clean_names(df)
# Installieren und laden des janitor-Pakets, falls nicht bereits geschehen
# install.packages("janitor")
library(janitor)
# Ein DataFrame mit unübersichtlichen Spaltennamen
df <- data.frame(
`Vorname ` = c("Anna", "Bert"),  # Leerzeichen am Ende
`Alter (%)` = c(28, 34),         # Sonderzeichen
`Land` = c("DE", "AT"),
check.names = FALSE              # Damit R die Namen nicht automatisch anpasst
)
# Spaltennamen vor der Bereinigung anzeigen
colnames(df)
# Bereinigen der Spaltennamen
df_clean <- clean_names(df)
# Spaltennamen nach der Bereinigung anzeigen
colnames(df_clean)
# dplyr::filter()
# Ein Beispiel-Datenrahmen
df <- data.frame(Name = c("Anna", "Bert", "Clara", "David"),
Alter = c(28, 34, 23, 45),
Land = c("DE", "AT", "CH", "DE"))
# Anwenden der filter-Funktion
df_filtered <- filter(df, Alter > 30)
# Ausgabe des gefilterten DataFrames
df_filtered
df_filtered <- filter(df, Alter > 30, Land == "DE")
# Ausgabe des gefilterten DataFrames
df_filtered
df %>%
filter(Alter > 30, Land == "DE")
show(df)
df %>%
filter(Alter > 30, Land == "DE")
# dplyr::slice()
mtcars # this should have 32 rows
slice(mtcars, 2:n()) # this should have 31 rows
# Den mtcars-Datensatz betrachten
head(mtcars)
# Auswahl der ersten 5 Zeilen mit slice()
mtcars_slice <- slice(mtcars, 1:5)
# Ausgabe der gefilterten Zeilen
mtcars_slice
# dplyr::select()
# Den mtcars-Datensatz betrachten
head(mtcars)
# Auswahl spezifischer Spalten mit select()
mtcars_selected <- select(mtcars, mpg, hp, wt)
# Ausgabe der ausgewählten Spalten
head(mtcars_selected)
mtcars %>%
select(mpg, hp, wt) %>%
filter(hp > 100)
# dplyr::rename()
library(dplyr)
# Den mtcars-Datensatz betrachten
head(mtcars)
# Umbenennen der Spalte 'mpg' in 'miles_per_gallon'
mtcars_renamed <- rename(mtcars, miles_per_gallon = mpg)
# Ausgabe der umbenannten Spalten
head(mtcars_renamed)
# dplyr::mutate()
# Den mtcars-Datensatz betrachten
head(mtcars)
# Hinzufügen einer neuen Spalte, die das Verhältnis von Gewicht zu Pferdestärke berechnet
mtcars_mutated <- mutate(mtcars, wt_hp_ratio = wt / hp)
# Ausgabe des DataFrames mit der neuen Spalte
head(mtcars_mutated)
# Den mtcars-Datensatz betrachten
head(mtcars)
# Erstellen einer neuen Spalte mit case_when
mtcars_new <- mtcars %>%
mutate(mpg_category = case_when(
mpg < 15 ~ "Niedrig",
mpg >= 15 & mpg < 25 ~ "Mittel",
mpg >= 25 ~ "Hoch"
))
# Ausgabe des DataFrames mit der neuen Spalte
head(mtcars_new)
# Den mtcars-Datensatz betrachten
head(mtcars)
# dplyr::summarize()
# Berechnung von Durchschnitt und Maximum über alle Zeilen
summary_stats <- mtcars %>%
summarize(avg_mpg = mean(mpg), max_hp = max(hp))
# Ausgabe der zusammengefassten Statistiken
summary_stats
# dplyr::count()
# Zählen der Häufigkeit von Zylindern im mtcars-Datensatz
cyl_count <- mtcars %>%
count(cyl)
# Ausgabe der Häufigkeiten
cyl_count
# dplyr::count()
# Zählen der Häufigkeit von Zylindern im mtcars-Datensatz
cyl_count <- mtcars %>%
count(cyl)
# Ausgabe der Häufigkeiten
cyl_count
gear_cyl_count <- mtcars %>%
count(cyl, gear)
# Ausgabe der Häufigkeiten für Zylinder und Ganganzahl
gear_cyl_count
# dplyr::distinct()
# Eindeutige Werte für die Zylinderanzahl
distinct_cyl <- mtcars %>%
distinct(cyl)
# Ausgabe der eindeutigen Zylinderwerte
distinct_cyl
distinct_cyl_gear <- mtcars %>%
distinct(cyl, gear)
# Ausgabe der eindeutigen Kombinationen von Zylinder- und Ganganzahl
distinct_cyl_gear
# dplyr::distinct()
# Eindeutige Werte für die Zylinderanzahl
distinct_cyl <- mtcars %>%
distinct(cyl)
# Ausgabe der eindeutigen Zylinderwerte
distinct_cyl
distinct_cyl_gear <- mtcars %>%
distinct(cyl, gear)
# Ausgabe der eindeutigen Kombinationen von Zylinder- und Ganganzahl
distinct_cyl_gear
distinct_cyl_gear_full <- mtcars %>%
distinct(cyl, gear, .keep_all = TRUE)
# Ausgabe der vollständigen Zeilen, aber mit eindeutigen Kombinationen von Zylinder- und Ganganzahl
distinct_cyl_gear_full
# dplyr::group_by() # or ".by ="
# Gruppierung nach der Anzahl der Zylinder und Berechnung des Durchschnitts von mpg
grouped_data <- mtcars %>%
group_by(cyl) %>%
summarize(avg_mpg = mean(mpg))
# Ausgabe der gruppierten und zusammengefassten Daten
grouped_data
# dplyr::group_by() # or ".by ="
# Gruppierung nach der Anzahl der Zylinder und Berechnung des Durchschnitts von mpg
grouped_data <- mtcars %>%
group_by(cyl) %>%
summarize(avg_mpg = mean(mpg))
# Ausgabe der gruppierten und zusammengefassten Daten
grouped_data
grouped_data_multi <- mtcars %>%
group_by(cyl, gear) %>%
summarize(avg_mpg = mean(mpg))
# Ausgabe der gruppierten Daten
grouped_data_multi
# dplyr::group_by() # or ".by ="
# Gruppierung nach der Anzahl der Zylinder und Berechnung des Durchschnitts von mpg
grouped_data <- mtcars %>%
group_by(cyl) %>%
summarize(avg_mpg = mean(mpg))
# Ausgabe der gruppierten und zusammengefassten Daten
grouped_data
grouped_data_multi <- mtcars %>%
group_by(cyl, gear) %>%
summarize(avg_mpg = mean(mpg))
# Ausgabe der gruppierten Daten
grouped_data_multi
mtcars_grouped <- mtcars %>%
group_by(cyl) %>%
mutate(relative_mpg = mpg / mean(mpg))
# Ausgabe der Daten mit der neuen Spalte relative_mpg
head(mtcars_grouped)
# dplyr::rowwise()
# Anwenden von rowwise und Berechnung des Maximums für jede Zeile
mtcars_rowwise <- mtcars %>%
rowwise() %>%
mutate(max_value = max(c(mpg, hp, wt)))
# Ausgabe der Daten mit der neuen Spalte max_value
head(mtcars_rowwise)
df <- data.frame(
ID = 1:3,
Datum_Uhrzeit = c("2023-10-01 10:30", "2023-10-02 12:00", "2023-10-03 14:15")
)
# tidyr::separate()
df_separated <- separate(df, col = Datum_Uhrzeit, into = c("Datum", "Uhrzeit"), sep = " ")
library(tidyr)
df <- data.frame(
ID = 1:3,
Datum_Uhrzeit = c("2023-10-01 10:30", "2023-10-02 12:00", "2023-10-03 14:15")
)
# tidyr::separate()
df_separated <- separate(df, col = Datum_Uhrzeit, into = c("Datum", "Uhrzeit"), sep = " ")
# Ausgabe des DataFrames mit den neuen Spalten
df_separated
# tidyr::fill()
library(tidyr)
df <- data.frame(
Monat = c("Januar", "Februar", "März", "April"),
Umsatz = c(100, NA, NA, 300)
)
# Füllen der NA-Werte mit dem letzten vorhandenen Wert
df_filled <- fill(df, Umsatz, .direction = "down")
# Ausgabe des DataFrames mit den gefüllten Werten
df_filled
# mtcars |> # example data
#   knitr::kable() |> # print a nicer looking table
#   kableExtra::kable_classic(full_width = FALSE) # print nicer again
library(knitr)
# Erstellen einer einfachen Tabelle mit kable
kable(mtcars, caption = "Mtcars Dataset")
# mtcars |> # example data
#   knitr::kable() |> # print a nicer looking table
#   kableExtra::kable_classic(full_width = FALSE) # print nicer again
library(knitr)
# Erstellen einer einfachen Tabelle mit kable
kable(mtcars, caption = "Mtcars Dataset")
library(kableExtra)
# Erstellen einer klassisch formatierten Tabelle mit kable_classic
kable(mtcars) %>%
kable_classic(full_width = FALSE)
