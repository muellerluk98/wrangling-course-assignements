# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(readr)
library(ggplot2)
# install.packages("datasauRus")
library(datasauRus)
library(readr)
library(ggplot2)
install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
library(plotrix)
library(readr)
library(ggplot2)
install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
install.packages("plotrix")
install.packages("datasauRus")
library(plotrix)
#devtools::install_github("matthewbjane/ThemePark")
library(ThemePark)
library(readr)
library(ggplot2)
install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
install.packages("plotrix")
library(plotrix)
devtools::install_github("matthewbjane/ThemePark")
library(ThemePark)
library(patchwork)
# get data
data_processed <- read_csv("../data/processed/data_processed.csv")
data_after_exclusions <- data_processed |>
filter(exclude_amp == "include" &
n_items == 3 &
gender %in% c("male", "female"))
View(data_after_exclusions)
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
geom_histogram()
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
geom_histogram(bindwidth = 1)
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
geom_histogram(binwidth = 1)
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_minimal()
theme_asteroid_city()
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_minimal()
theme_asteroid_city()
View(data_after_exclusions)
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = gender))
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_minimal()
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = gender))
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_minimal()
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = gender))
plotAMP
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = gender)) +
geom_point()
plotAMP
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_point()
plotAMP
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_minimal()
plotAMP
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_minimal()
plotAMP
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_minimal()
plotAMP
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 1),
limits = c(0, 1)) +
theme_minimal()
plotAMP
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 10),
limits = c(0, 1)) +
theme_minimal()
plotAMP
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_barbie()
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
scale_y_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5))
theme_barbie()
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
scale_y_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0, 50))
theme_barbie()
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = seq(0, 1, 10)) +
theme_minimal()
plotAMP
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = seq(0, 1, .10),
name = "AMP score")) +
plotAMP <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = seq(0, 1, .10),
name = "AMP score") +
scale_y_continuous(breaks = seq(0, 40, 5),
name = "Frequency")
theme_minimal()
plotAMP
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_density(adjust = 1, # the degree of smoothing can be adjusted here
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(1, 7)) +
theme_minimal()
plotamp <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3)
plotamp
plotamp <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = AMP) +
scale_y_continuous(name = AMd)
plotamp <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = AMP) +
scale_y_continuous(name = AMd))
plotamp <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = AMP) +
scale_y_continuous(name = AMd)
plotamp <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = "AMP") +
scale_y_continuous(name = "AMd")
plotamp
plotamp <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = "AMP score") +
scale_y_continuous(name = "count")
plotamp
plotamp <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = "AMP score") +
scale_y_continuous(name = "count") +
theme_minimal()
plotamp
plotamp <-
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
name = "AMP score") +
scale_y_continuous(name = "count") +
theme_barbie()
plotamp
ggplot(data = summary_amp,
aes(x = gender,
y = amp_mean)) +
geom_col(fill = "#0b6623", # note that you can specify specific colors using hex codes or names
color = "black",
width = 0.6) +
geom_errorbar(aes(ymin = amp_mean - amp_se,
ymax = amp_mean + amp_se),
width = 0.1,
color = "black") +
labs(title = "Bar Plot of with Standard Errors",
x = "Gender",
y = "Mean AMP score") +
theme_linedraw()
# create the summary values to be plotted
summary_amp <- data_after_exclusions %>%
group_by(gender) %>%
summarize(amp_mean = mean(amp_score),
amp_se = plotrix::std.error(amp_score))
# plot these values
ggplot(data = summary_amp,
aes(x = gender,
y = amp_mean)) +
geom_col() +
# geom_bar(stat = "identity") + # NB geom_col is equivalent to geom_bar when stat == "identity
geom_linerange(aes(ymin = amp_mean - amp_se,
ymax = amp_mean + amp_se))
ggplot(data = summary_amp,
aes(x = gender,
y = amp_mean)) +
geom_col(fill = "#0b6623", # note that you can specify specific colors using hex codes or names
color = "black",
width = 0.6) +
geom_errorbar(aes(ymin = amp_mean - amp_se,
ymax = amp_mean + amp_se),
width = 0.1,
color = "black") +
labs(title = "Bar Plot of with Standard Errors",
x = "Gender",
y = "Mean AMP score") +
theme_linedraw()
View(summary_amp)
selfrepoplot <-
ggplot(data = data_after_exclusions,
aes(x = gender,
y = mean_self_report)) +
geom_col(fill = "#0b6623", # note that you can specify specific colors using hex codes or names
color = "black",
width = 0.6)
selfrepoplot
