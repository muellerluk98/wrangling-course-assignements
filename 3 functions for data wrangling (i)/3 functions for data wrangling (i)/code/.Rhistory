mutate(latency = latency / 1000) # latency is now in seconds rather than milliseconds
# illustrate the problem with the gender responses:
data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
count(response) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_1 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender)) %>%
mutate(gender = str_remove_all(gender, "[\\d.]")) %>% # remove everything except letters
mutate(gender = na_if(gender, "")) %>%
mutate(gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# illustrate the data after cleaning:
data_demographics_gender_tidy_1 %>%
count(gender) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_2 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"), # remove everything except letters
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# check they are identical
identical(data_demographics_gender_tidy_1, data_demographics_gender_tidy_2)
?ifelse
?mutate
data_amp_test_trials_with_fast_trials <- data_amp_test_trials %>%
mutate(fast_trial = latency < 100)
data_amp_test_trials_with_fast_trials_2 <- data_amp_test_trials %>%
mutate(fast_trial = ifelse(latency < 100, TRUE, FALSE))
# what values are present?
data_demographics_trimmed %>%
filter(item == "age") %>%
count(response)
# fix them with mutate
data_demographics_age_tidy <- data_demographics_trimmed %>%
filter(item == "age") %>%
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response)) %>%
select(unique_id, age = response) # note that you can rename inside a select call
# check this has fixed the issue
data_demographics_age_tidy %>%
count(age)
data_amp_tidy <- data_amp_test_trials_with_fast_trials %>%
mutate(correct = case_when(trial_type == "prime_positive" ~ correct,
trial_type == "prime_negative" & correct == 0 ~ 1,
trial_type == "prime_negative" & correct == 1 ~ 0))
data_selfreport_tidy <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA,
response = as.numeric())
# write examples here
data_selfreport_tidy <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA,
response = as.numeric(response))
# write examples here
data_selfreport_tidy <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA),
response = as.numeric(response))
data_selfreport_tidy <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA, response),
response = as.numeric(response))
# write examples here
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
library(kableExtra)
?read_csv
?mutate
?dplyr
?join
?select
?getwd
?setwd
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
nrow(data_demographics_raw)
nrow(data_selfreport_raw)
nrow(data_amp_raw)
# use a function without the pipe
???
# use a function with the pipe.
???
# check they produce identical results
???
round(0.5) # should be 1, bankers rounding will give us 0
round(1.5) # should be 2, bankers rounding will give us 1
round(2.5) # should be 3, bankers rounding will give us 2
round(3.5) # should be 4, bankers rounding will give us 3
round(4.5) # should be 5, bankers rounding will give us 4
round(5.5) # should be 6, bankers rounding will give us 6
round_half_up(0.5)
round_half_up(1.5)
round_half_up(2.5)
round_half_up(3.5)
round_half_up(4.5)
round_half_up(5.5)
# mean
data_demographics_age_tidy %>%
summarize(mean_age = mean(age, na.rm = TRUE))
data_demographics_trimmed %>%
count(item, response) %>%
arrange(desc(n)) # arrange in descending order
# remove all objects in environment
rm(list = ls())
data_demographics_trimmed <- read_csv("../data/raw/data_demographics_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_selfreport_trimmed <- read_csv("../data/raw/data_selfreport_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_amp_trimmed <- read_csv("../data/raw/data_amp_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode) %>%
select(unique_id, block, trial_type, correct, latency)
# mean
data_demographics_age_tidy %>%
summarize(mean_age = mean(age, na.rm = TRUE))
# mean
data_demographics_age_trimmed %>%
summarize(mean_age = mean(age, na.rm = TRUE))
# mean
data_demographics_trimmed %>%
summarize(mean_age = mean(age, na.rm = TRUE))
View(data_amp_trimmed)
View(data_demographics_trimmed)
# # this code creates data needed for this example - you can simply load the data from disk and skip over this commented-out code. we will come back to things like 'joins' later
# data_demographics_unique_participant_codes <- data_demographics_trimmed %>%
#   count(unique_id) %>%
#   filter(n == 2)
#
# data_demographics_age_gender_tidy <- data_demographics_trimmed %>%
#   semi_join(data_demographics_unique_participant_codes, by = "unique_id") %>%
#   pivot_wider(names_from = "item",
#               values_from = "response") %>%
#   mutate(age = ifelse(age == "old", NA, age),
#          age = as.numeric(age),
#          gender = tolower(gender),
#          gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
#          gender = case_when(gender == "female" ~ gender,
#                             gender == "male" ~ gender,
#                             gender == "nonbinary" ~ gender,
#                             gender == "woman" ~ "female",
#                             gender == "man" ~ "male"))
#
# dir.create("../data/processed")
# write_csv(data_demographics_age_gender_tidy, "../data/processed/data_demographics_age_gender_tidy.csv")
# load suitable example data from disk
data_demographics_age_gender_tidy <- read_csv("data_demographics_age_gender_tidy.csv")
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
library(kableExtra)
?read_csv
?mutate
?dplyr
?join
?select
?getwd
?setwd
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
nrow(data_demographics_raw)
nrow(data_selfreport_raw)
nrow(data_amp_raw)
# use a function without the pipe
nopipe <- clean_names(data_demographics_raw)
# use a function with the pipe.
pipe <- data_demographics_raw %>%
clean_names()
# check they produce identical results
ident(pipe, nopipe)
# use a function without the pipe
nopipe <- clean_names(data_demographics_raw)
# use a function with the pipe.
pipe <- data_demographics_raw %>%
clean_names()
# check they produce identical results
identical(pipe, nopipe)
# use a function without the pipe
data_amp_raw2 <- clean_names(data_amp_raw)
# use a function with the pipe. the output of what is left of the pipe is used as the input to the right of the pipe, usually as the first argument or the data argument.
data_amp_raw3 <- data_amp_raw %>%
clean_names()
# check they produce identical results
identical(data_amp_raw2, data_amp_raw3)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
library(kableExtra)
?read_csv
?mutate
?dplyr
?join
?select
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
nrow(data_demographics_raw)
nrow(data_selfreport_raw)
nrow(data_amp_raw)
# use a function without the pipe
nopipe <- clean_names(data_demographics_raw)
# use a function with the pipe.
pipe <- data_demographics_raw %>%
clean_names()
# check they produce identical results
identical(pipe, nopipe)
# use a function without the pipe
data_amp_raw2 <- clean_names(data_amp_raw)
# use a function with the pipe. the output of what is left of the pipe is used as the input to the right of the pipe, usually as the first argument or the data argument.
data_amp_raw3 <- data_amp_raw %>%
clean_names()
# check they produce identical results
identical(data_amp_raw2, data_amp_raw3)
# use a function without the pipe
data_amp_raw2 <- clean_names(data_amp_raw)
# use a function with the pipe. the output of what is left of the pipe is used as the input to the right of the pipe, usually as the first argument or the data argument.
data_amp_raw3 <- data_amp_raw %>%
clean_names()
# check they produce identical results
identical(data_amp_raw2, data_amp_raw3)
# use a series of functions without the pipe
example2_without_pipe <- summarise(group_by(mutate(rename(clean_names(dat = data_amp_raw), unique_id = subject, block = blockcode, trial_type = trialcode, rt = latency), fast_trial = ifelse(rt < 100, 1, 0)), unique_id), percent_fast_trials = mean(fast_trial)*100)
# use a series of functions with the pipe
example2_with_pipe <- data_amp_raw %>%
# clean the column names
clean_names() %>%
# rename the columns
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode,
rt = latency) %>%
# create a new variable using existing ones
mutate(fast_trial = ifelse(rt < 100, 1, 0)) %>%
# summarize across trials for each participant
group_by(unique_id) %>%
summarise(percent_fast_trials = mean(fast_trial)*100)
# check they produce identical results
identical(example2_without_pipe, example2_with_pipe)
data_demographics_clean_names <- clean_names(data_demographics_raw)
data_demographics_clean_names2 <- data_demographics_raw %>%
clean_names()
identical(data_demographics_clean_names, data_demographics_clean_names2)
data_selfreport_clean_names <- clean_names(data_selfreport_raw)
data_selfreport_clean_names2 <- data_selfreport_raw %>%
clean_names()
identical(data_selfreport_clean_names, data_selfreport_clean_names2)
data_amp_clean_names <- clean_names(data_amp_raw)
data_amp_clean_names2 <- data_amp_raw %>%
clean_names()
identical(data_amp_clean_names, data_amp_clean_names2)
# print all column names
colnames(data_demographics_clean_names)
# print all column names as a vector
dput(colnames(data_demographics_clean_names))
# print all column names as a vector using the pipe
data_demographics_clean_names %>%
colnames() %>%
dput()
#data_selfreport_clean_names
# print all column names
colnames(data_selfreport_clean_names)
# print all column names as a vector
dput(colnames(data_selfreport_clean_names))
# print all column names as a vector using the pipe
data_selfreport_clean_names %>%
colnames() %>%
dput()
#data_amp_clean_names
# print all column names
colnames(data_amp_clean_names)
# print all column names as a vector
dput(colnames(data_amp_clean_names))
# print all column names as a vector using the pipe
data_amp_clean_names %>%
colnames() %>%
dput()
data_demographics_renamed <- data_demographics_clean_names %>%
rename(unique_id = subject,
item = trialcode)
data_selfreport_renamed <- data_selfreport_clean_names %>%
rename(unique_id = subject,
item = trialcode)
data_amp_renamed <- data_amp_clean_names %>%
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode)
data_demographics_selected_columns <- data_demographics_renamed %>%
select(unique_id, item, response)
data_selfreport_selected_columns <- data_selfreport_renamed %>%
select(unique_id, item, response)
data_amp_selected_columns <- data_amp_renamed %>%
select(unique_id, block, trial_type, correct, latency)
# remove all objects in environment
rm(list = ls())
data_demographics_trimmed <- read_csv("../data/raw/data_demographics_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_selfreport_trimmed <- read_csv("../data/raw/data_selfreport_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_amp_trimmed <- read_csv("../data/raw/data_amp_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode) %>%
select(unique_id, block, trial_type, correct, latency)
data_demographics_trimmed %>%
count(item)
data_demographics_trimmed %>%
count(response)
data_selfreport_trimmed %>%
count(item)
data_selfreport_trimmed %>%
count(response)
data_amp_trimmed %>%
count(block)
data_amp_trimmed %>%
count(trial_type)
data_amp_trimmed %>%
count(correct)
data_amp_trimmed %>%
count(latency)
data_demographics_trimmed %>%
count(item, response)
data_demographics_trimmed %>%
count(item, response) %>%
arrange(desc(n)) # arrange in descending order
# example using equivalence
example_equivalence <- data_amp_trimmed %>%
filter(block == "test")
# example using negation
example_negation <- data_selfreport_trimmed %>%
filter(item != "instructions")
# example using membership
example_membership <- data_selfreport_trimmed %>%
filter(item %in% c("positive", "prefer", "like"))
example_multiple_criteria_1 <- data_amp_trimmed %>%
filter(block != "test" & correct == 1)
example_multiple_criteria_2 <- data_amp_trimmed %>%
filter(block != "test" | correct == 1)
# note that these provide different results - make sure you understand why --> there is a difference because in example_multiple_criteria_1 we filtered for rows that have the two following properties: - NOT have ''test'' in the block column AND have 1 in the correct column. in example_multiple_criteria_2 we filtered rows that fulfill AT LEAST one of those criteria. so the _2 should have more rows than the _1
identical(example_multiple_criteria_1, example_multiple_criteria_2)
# Filter the self reports & remove the instructions
filtered_selfreports <- data_selfreport_trimmed %>%
filter(item != "instructions")
# Filter the AMP data & remove the practice blocks and the instruction trials.
filtered_amp <- data_amp_trimmed %>%
filter(block != "practice")
data_amp_test_trials <- data_amp_trimmed %>%
select(unique_id, latency)
# mutating new variables
example_1 <- data_amp_test_trials %>%
mutate(latency_plus_1 = latency + 1)
example_2 <- data_amp_test_trials %>%
mutate(log_latency = log(latency))
# mutating the contents of existing variables
example_3 <- data_amp_test_trials %>%
mutate(latency = latency / 1000) # latency is now in seconds rather than milliseconds
# illustrate the problem with the gender responses:
data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
count(response) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_1 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender)) %>%
mutate(gender = str_remove_all(gender, "[\\d.]")) %>% # remove everything except letters
mutate(gender = na_if(gender, "")) %>%
mutate(gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# illustrate the data after cleaning:
data_demographics_gender_tidy_1 %>%
count(gender) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_2 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"), # remove everything except letters
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# check they are identical
identical(data_demographics_gender_tidy_1, data_demographics_gender_tidy_2)
?ifelse
?mutate
data_amp_test_trials_with_fast_trials <- data_amp_test_trials %>%
mutate(fast_trial = latency < 100)
data_amp_test_trials_with_fast_trials_2 <- data_amp_test_trials %>%
mutate(fast_trial = ifelse(latency < 100, TRUE, FALSE))
# what values are present?
data_demographics_trimmed %>%
filter(item == "age") %>%
count(response)
# fix them with mutate
data_demographics_age_tidy <- data_demographics_trimmed %>%
filter(item == "age") %>%
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response)) %>%
select(unique_id, age = response) # note that you can rename inside a select call
# check this has fixed the issue
data_demographics_age_tidy %>%
count(age)
# what values are present? --> here we see that ther was one person who answered Ctrl+'B'
data_selfreport_trimmed %>%
count(response)
# what type of data is the response column?
class(data_selfreport_trimmed$response)
# remove non Likert values and make the response variable numeric
data_selfreport_tidy <- data_selfreport_trimmed %>%
mutate(response = ifelse(response %in% c("1", "2", "3", "4", "5", "6", "7"), response, NA),
response = as.numeric(response))
# show the data after changes
data_selfreport_tidy %>%
count(response)
class(data_selfreport_tidy$response) # sanity check if the values are 4real numeric
data_selfreport_tidy <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA, response),
response = as.numeric(response))
# write examples here
data_amp_tidy <- data_amp_test_trials_with_fast_trials %>%
mutate(correct = case_when(trial_type == "prime_positive" ~ correct,
trial_type == "prime_negative" & correct == 0 ~ 1,
trial_type == "prime_negative" & correct == 1 ~ 0))
