select(unique_id, block, trial_type, correct, latency)
# remove all objects in environment
rm(list = ls())
data_demographics_trimmed <- read_csv("../data/raw/data_demographics_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_selfreport_trimmed <- read_csv("../data/raw/data_selfreport_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_amp_trimmed <- read_csv("../data/raw/data_amp_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode) %>%
select(unique_id, block, trial_type, correct, latency)
data_demographics_trimmed %>%
count(item)
data_demographics_trimmed %>%
count(response)
data_selfreport_trimmed %>%
count(item)
data_selfreport_trimmed %>%
count(response)
data_amp_trimmed %>%
count(block)
data_amp_trimmed %>%
count(trial_type)
data_amp_trimmed %>%
count(correct)
data_amp_trimmed %>%
count(latency)
data_demographics_trimmed %>%
count(item, response)
data_demographics_trimmed %>%
count(item, response) %>%
arrange(desc(n)) # arrange in descending order
# example using equivalence
example_equivalence <- data_amp_trimmed %>%
filter(block == "test")
# example using negation
example_negation <- data_selfreport_trimmed %>%
filter(item != "instructions")
# example using membership
example_membership <- data_selfreport_trimmed %>%
filter(item %in% c("positive", "prefer", "like"))
example_multiple_criteria_1 <- data_amp_trimmed %>%
filter(block != "test" & correct == 1)
example_multiple_criteria_2 <- data_amp_trimmed %>%
filter(block != "test" | correct == 1)
# note that these provide different results - make sure you understand why --> there is a difference because in example_multiple_criteria_1 we filtered for rows that have the two following properties: - NOT have ''test'' in the block column AND have 1 in the correct column. in example_multiple_criteria_2 we filtered rows that fulfill AT LEAST one of those criteria. so the _2 should have more rows than the _1
identical(example_multiple_criteria_1, example_multiple_criteria_2)
# Filter the self reports & remove the instructions
filtered_selfreports <- data_selfreport_trimmed %>%
filter(item != "instructions")
# Filter the AMP data & remove the practice blocks and the instruction trials.
filtered_amp <- data_amp_trimmed %>%
filter(block != "practice")
data_amp_test_trials <- data_amp_trimmed %>%
select(unique_id, latency)
# mutating new variables
example_1 <- data_amp_test_trials %>%
mutate(latency_plus_1 = latency + 1)
example_2 <- data_amp_test_trials %>%
mutate(log_latency = log(latency))
# mutating the contents of existing variables
example_3 <- data_amp_test_trials %>%
mutate(latency = latency / 1000) # latency is now in seconds rather than milliseconds
# illustrate the problem with the gender responses:
data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
count(response) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_1 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender)) %>%
mutate(gender = str_remove_all(gender, "[\\d.]")) %>% # remove everything except letters
mutate(gender = na_if(gender, "")) %>%
mutate(gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# illustrate the data after cleaning:
data_demographics_gender_tidy_1 %>%
count(gender) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_2 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"), # remove everything except letters
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# check they are identical
identical(data_demographics_gender_tidy_1, data_demographics_gender_tidy_2)
?ifelse
?mutate
data_amp_test_trials_with_fast_trials <- data_amp_test_trials %>%
mutate(fast_trial = latency < 100)
data_amp_test_trials_with_fast_trials_2 <- data_amp_test_trials %>%
mutate(latency = ifelse(latency == 100, NA, latency))
View(data_amp_test_trials_with_fast_trials_2)
?ifelse
?mutate
data_amp_test_trials_with_fast_trials <- data_amp_test_trials %>%
mutate(fast_trial = latency < 100)
data_amp_test_trials_with_fast_trials_2 <- data_amp_test_trials %>%
mutate(fast_trial = ifelse(latency < 100, TRUE, FALSE))
View(data_amp_test_trials_with_fast_trials_2)
View(data_amp_test_trials_with_fast_trials)
# what values are present?
data_demographics_trimmed %>%
filter(item == "age") %>%
count(response)
# fix them with mutate
data_demographics_age_tidy <- data_demographics_trimmed %>%
filter(item == "age") %>%
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response)) %>%
select(unique_id, age = response) # note that you can rename inside a select call
View(data_demographics_age_tidy)
# check this has fixed the issue
data_demographics_age_tidy %>%
count(age)
# what values are present?
data_selfreport_trials %>%
count(response)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
library(kableExtra)
?read_csv
?mutate
?dplyr
?join
?select
?getwd
?setwd
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
nrow(data_demographics_raw)
nrow(data_selfreport_raw)
nrow(data_amp_raw)
# use a function without the pipe
???
# use a function with the pipe.
???
# check they produce identical results
???
# what values are present?
data_selfreport_trials %>%
count(response)
View(data_selfreport_raw)
View(data_selfreport_trimmed)
# what values are present?
data_selfreport_trimmed %>%
count(response)
# what type of data is the response column?
class(data_selfreport_trimmed$response)
# remove non Likert values and make the response variable numeric
data_selfreport_tidy <- data_selfreport_trimmed %>%
mutate(response = ifelse(response %in% c("1", "2", "3", "4", "5", "6", "7"), response, NA),
response = as.numeric(response))
# show the data after changes
data_selfreport_tidy %>%
count(response)
class(data_selfreport_tidy$response)
?ifelse
?ifelse
# write examples here
# remove non Likert values and make the response variable numeric
data_selfreport_tidy2 <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == Ctrl+'B', NA, respnse),
response = as.numeric(response))
?ifelse
# write examples here
# remove non Likert values and make the response variable numeric
data_selfreport_tidy2 <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B', NA", respnse),
response = as.numeric(response))
?ifelse
# write examples here
# remove non Likert values and make the response variable numeric
data_selfreport_tidy2 <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA, respnse),
response = as.numeric(response))
?ifelse
# write examples here
# remove non Likert values and make the response variable numeric
data_selfreport_tidy2 <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA, response),
response = as.numeric(response))
?ifelse
# write examples here
# remove non Likert values and make the response variable numeric
data_selfreport_tidy2 <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA, response),
response = as.numeric(response))
identical(data_selfreport_tidy, data_selfreport_tidy2)
View(data_selfreport_trimmed)
View(data_selfreport_tidy2)
data_amp_tidy <- data_amp_test_trials_with_fast_trials %>%
mutate(correct = case_when(trial_type == "prime_positive" ~ correct,
trial_type == "prime_negative" & correct == 0 ~ 1,
trial_type == "prime_negative" & correct == 1 ~ 0))
View(data_amp_test_trials_with_fast_trials)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
library(kableExtra)
?read_csv
?mutate
?dplyr
?join
?select
?getwd
?setwd
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
nrow(data_demographics_raw)
nrow(data_selfreport_raw)
nrow(data_amp_raw)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
library(kableExtra)
?read_csv
?mutate
?dplyr
?join
?select
?getwd
?setwd
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
nrow(data_demographics_raw)
nrow(data_selfreport_raw)
nrow(data_amp_raw)
# use a function without the pipe
???
# use a function with the pipe.
???
# check they produce identical results
???
# what values are present?
data_demographics_trimmed %>%
filter(item == "age") %>%
count(response)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
library(kableExtra)
?read_csv
?mutate
?dplyr
?join
?select
?getwd
?setwd
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
nrow(data_demographics_raw)
nrow(data_selfreport_raw)
nrow(data_amp_raw)
# use a function without the pipe
???
# use a function with the pipe.
???
# check they produce identical results
???
# what values are present?
data_demographics_trimmed %>%
filter(item == "age") %>%
count(response)
# illustrate the problem with the gender responses:
data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
count(response) %>%
arrange(desc(n))
data_demographics_trimmed %>%
count(item, response)
data_amp_trimmed %>%
count(block)
data_demographics_trimmed %>%
count(item)
# remove all objects in environment
rm(list = ls())
data_demographics_trimmed <- read_csv("../data/raw/data_demographics_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_selfreport_trimmed <- read_csv("../data/raw/data_selfreport_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_amp_trimmed <- read_csv("../data/raw/data_amp_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode) %>%
select(unique_id, block, trial_type, correct, latency)
data_demographics_trimmed %>%
count(item)
data_demographics_trimmed %>%
count(response)
data_selfreport_trimmed %>%
count(item)
data_selfreport_trimmed %>%
count(response)
data_amp_trimmed %>%
count(block)
data_amp_trimmed %>%
count(trial_type)
data_amp_trimmed %>%
count(correct)
data_amp_trimmed %>%
count(latency)
data_demographics_trimmed %>%
count(item, response)
data_demographics_trimmed %>%
count(item, response) %>%
arrange(desc(n)) # arrange in descending order
# example using equivalence
example_equivalence <- data_amp_trimmed %>%
filter(block == "test")
# example using negation
example_negation <- data_selfreport_trimmed %>%
filter(item != "instructions")
# example using membership
example_membership <- data_selfreport_trimmed %>%
filter(item %in% c("positive", "prefer", "like"))
example_multiple_criteria_1 <- data_amp_trimmed %>%
filter(block != "test" & correct == 1)
example_multiple_criteria_2 <- data_amp_trimmed %>%
filter(block != "test" | correct == 1)
# note that these provide different results - make sure you understand why --> there is a difference because in example_multiple_criteria_1 we filtered for rows that have the two following properties: - NOT have ''test'' in the block column AND have 1 in the correct column. in example_multiple_criteria_2 we filtered rows that fulfill AT LEAST one of those criteria. so the _2 should have more rows than the _1
identical(example_multiple_criteria_1, example_multiple_criteria_2)
# Filter the self reports & remove the instructions
filtered_selfreports <- data_selfreport_trimmed %>%
filter(item != "instructions")
# Filter the AMP data & remove the practice blocks and the instruction trials.
filtered_amp <- data_amp_trimmed %>%
filter(block != "practice")
data_amp_test_trials <- data_amp_trimmed %>%
select(unique_id, latency)
# mutating new variables
example_1 <- data_amp_test_trials %>%
mutate(latency_plus_1 = latency + 1)
example_2 <- data_amp_test_trials %>%
mutate(log_latency = log(latency))
# mutating the contents of existing variables
example_3 <- data_amp_test_trials %>%
mutate(latency = latency / 1000) # latency is now in seconds rather than milliseconds
# illustrate the problem with the gender responses:
data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
count(response) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_1 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender)) %>%
mutate(gender = str_remove_all(gender, "[\\d.]")) %>% # remove everything except letters
mutate(gender = na_if(gender, "")) %>%
mutate(gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# illustrate the data after cleaning:
data_demographics_gender_tidy_1 %>%
count(gender) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_2 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"), # remove everything except letters
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# check they are identical
identical(data_demographics_gender_tidy_1, data_demographics_gender_tidy_2)
?ifelse
?mutate
data_amp_test_trials_with_fast_trials <- data_amp_test_trials %>%
mutate(fast_trial = latency < 100)
data_amp_test_trials_with_fast_trials_2 <- data_amp_test_trials %>%
mutate(fast_trial = ifelse(latency < 100, TRUE, FALSE))
# what values are present?
data_demographics_trimmed %>%
filter(item == "age") %>%
count(response)
# fix them with mutate
data_demographics_age_tidy <- data_demographics_trimmed %>%
filter(item == "age") %>%
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response)) %>%
select(unique_id, age = response) # note that you can rename inside a select call
# check this has fixed the issue
data_demographics_age_tidy %>%
count(age)
data_amp_tidy <- data_amp_test_trials_with_fast_trials %>%
mutate(correct = case_when(trial_type == "prime_positive" ~ correct,
trial_type == "prime_negative" & correct == 0 ~ 1,
trial_type == "prime_negative" & correct == 1 ~ 0))
data_selfreport_tidy <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA,
response = as.numeric())
# write examples here
data_selfreport_tidy <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA,
response = as.numeric(response))
# write examples here
data_selfreport_tidy <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA),
response = as.numeric(response))
data_selfreport_tidy <- data_selfreport_trimmed %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA, response),
response = as.numeric(response))
# write examples here
