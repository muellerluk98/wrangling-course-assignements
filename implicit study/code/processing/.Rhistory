filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "yes" ~ NA_character_,
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) |>
select(unique_id, gender)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
#select(-item) # alternative: negative selection
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "yes" ~ NA_character_,
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) |>
select(unique_id, gender)
View(dat_age)
View(dat_gender)
View(dat_unique_id)
dat_combined <-
full_join(dat_age,
dat_gender,
dat_unique_id, by = "unique_id")
# dat_unique_id
# dat_age
# dat_gender
View(dat_combined)
View(dat_gender)
dat_combined <- dat_unique_id %>%
inner_join(dat_age, by = "unique_id") %>%
inner_join(dat_gender, by = "unique_id")
# dat_unique_id
# dat_age
# dat_gender
View(dat_combined)
# basic tidying
data_amp_tidied <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, block_type, rt) |>
filter(block_type == "test")
# are there duplicates or incomplete data?
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_complete_amp <- data_amp_tidied |>
count(unique_id, name = "n_trials") |>
filter(n_trials == 72)
data_amp_tidied_complete <- data_amp_tidied |>
semi_join(data_complete_amp, by = "unique_id")
# are there duplicates or incomplete data?
# sanity check should have one row
data_amp_tidied_complete |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
# rm(data_complete_amp) # remove from environment
View(data_amp_tidied_complete)
data_amp_performance_criteria <- data_amp_tidied_complete |>
mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
# for each participant...
group_by(unique_id) |>
# ... summarize the percent of fast trials
summarise(percent_fast_trials = mean(fast_trial)*100) |>
# flag unique_ids that have too many fast trials
mutate(exclude_amp_performance = ifelse(percent_fast_trials > 10, "exclude", "include"))
#colnames(data_selfreport_raw)
# basic tidying
data_selfreport_tidied <- data_selfreport_raw |>
rename(unique_id = subject,
item_type = trialcode) |>
select(unique_id, item_type, response) |>
filter(item_type != "instructions")
View(data_selfreport_tidied)
View(data_amp_performance_criteria)
data_processed <- read_csv("C:/Users/41796/OneDrive/Desktop/baumschule/semester 12/GitHub/data-wrangling-and-visualization-course/week 3/code/data/processed/data_processed.csv")
data_processed <- read_csv("C:/Users/41796/OneDrive/Desktop/baumschule/semester 12/GitHub/data-wrangling-and-visualization-course/week 3/code/data/processed/data_processed.csv")
head(data_processed)
View(data_amp_tidied_complete)
View(data_selfreport_tidied)
selfreport <- data_selfreport_tidied %>%
group_by(unique_id) %>%
mutate(exclude.list = ifelse(response %in% c(1:7), "include","exclude")) %>%
ungroup()
View(selfreport)
# count number of unique_ids with correct/wrong number of responses
counter <- selfreport %>%
count(exclude.list)
View(counter)
# Exclude them
selfreport <- selfreport %>%
filter(exclude.list != "exclude")
View(selfreport)
library(dplyr)
# 1. Ersetze alle nicht 1-7 Zahlen in `response` durch NA
selfreport <- data_selfreport_tidied %>%
mutate(response = ifelse(response %in% 1:7, response, NA))
# 2. Zähle die Anzahl der unique_ids mit korrekter (alle 1-7) oder inkorrekter Anzahl an Antworten
#    Hier wird angenommen, dass es eine festgelegte Anzahl an Antworten pro unique_id geben soll, z.B. 10 Antworten
selfreport_summary <- selfreport %>%
group_by(unique_id) %>%
summarize(correct_responses = sum(!is.na(response)),  # korrekte Antworten (1-7)
total_responses = n()) %>%                  # Gesamtzahl der Antworten
mutate(response_status = ifelse(correct_responses == total_responses, "correct", "wrong"))
# 3. Schließe diejenigen unique_ids aus, die eine falsche Anzahl an Antworten haben
selfreport_filtered <- selfreport %>%
inner_join(selfreport_summary %>% filter(response_status == "correct"), by = "unique_id")
# 4. Überprüfe, ob das Ausschließen korrekt funktioniert hat
#    Zähle erneut die Anzahl der unique_ids mit korrekter/inkorrekter Anzahl an Antworten
check_exclusions <- selfreport_filtered %>%
group_by(unique_id) %>%
summarize(correct_responses = sum(!is.na(response)),
total_responses = n()) %>%
mutate(response_status = ifelse(correct_responses == total_responses, "correct", "wrong"))
# Zeige die Zusammenfassung der Ausschlüsse an
table(check_exclusions$response_status)
library(dplyr)
# 1. Ersetze alle nicht 1-7 Zahlen in `response` durch NA
selfreport <- data_selfreport_tidied %>%
mutate(response = ifelse(response %in% 1:7, response, NA))
# 2. Zähle die Anzahl der unique_ids mit korrekter (alle 1-7) oder inkorrekter Anzahl an Antworten
#    Hier wird angenommen, dass es eine festgelegte Anzahl an Antworten pro unique_id geben soll, z.B. 10 Antworten
selfreport_summary <- selfreport %>%
group_by(unique_id) %>%
summarize(correct_responses = sum(!is.na(response)),  # korrekte Antworten (1-7)
total_responses = n()) %>%                  # Gesamtzahl der Antworten
mutate(response_status = ifelse(correct_responses == total_responses, "correct", "wrong"))
# 3. Schließe diejenigen unique_ids aus, die eine falsche Anzahl an Antworten haben
selfreport_filtered <- selfreport %>%
inner_join(selfreport_summary %>% filter(response_status == "correct"), by = "unique_id")
# 4. Überprüfe, ob das Ausschließen korrekt funktioniert hat
#    Zähle erneut die Anzahl der unique_ids mit korrekter/inkorrekter Anzahl an Antworten
check_exclusions <- selfreport_filtered %>%
group_by(unique_id) %>%
summarize(correct_responses = sum(!is.na(response)),
total_responses = n()) %>%
mutate(response_status = ifelse(correct_responses == total_responses, "correct", "wrong"))
# Zeige die Zusammenfassung der Ausschlüsse an
table(check_exclusions$response_status)
View(check_exclusions)
View(counter)
View(check_exclusions)
View(selfreport)
View(selfreport_filtered)
View(selfreport_summary)
# everywhere there isnt 1-7 in ´response´, write NA
selfreport <- data_selfreport_tidied %>%
mutate(response = ifelse(response %in% 1:7, response, NA))
# count the people who got 1-7 in ´response´ and the people that don´t
selfreport_summary <- selfreport %>%
group_by(unique_id) %>%
summarize(correct_responses = sum(!is.na(response)),
total_responses = n()) %>%
mutate(response_status = ifelse(correct_responses == total_responses, "correct", "wrong"))
# exclude the people who doesnt got 1-7 in ´response´
selfreport_filtered <- selfreport %>%
inner_join(selfreport_summary %>% filter(response_status == "correct"), by = "unique_id")
# check if the exclusion worked
check_exclusions <- selfreport_filtered %>%
group_by(unique_id) %>%
summarize(correct_responses = sum(!is.na(response)),
total_responses = n()) %>%
mutate(response_status = ifelse(correct_responses == total_responses, "correct", "wrong"))
# show the number of people that weren´t excluded throughout this chunk
table(check_exclusions$response_status)
data_selfreport_tidied
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
data_selfreport_tidied
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
# do we have duplicate data
data_demographics_raw |>
count(subject) |>
arrange(desc(n))
dat_unique_id <- data_demographics_raw |>
rename(unique_id = subject) |>
count(unique_id) |>
filter(n == 2) |>
select(unique_id)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
#select(-item) # alternative: negative selection
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "yes" ~ NA_character_,
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) |>
select(unique_id, gender)
# dat_unique_id
# dat_age
# dat_gender
# basic tidying
data_amp_tidied <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, block_type, rt) |>
filter(block_type == "test")
# are there duplicates or incomplete data?
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_complete_amp <- data_amp_tidied |>
count(unique_id, name = "n_trials") |>
filter(n_trials == 72)
data_amp_tidied_complete <- data_amp_tidied |>
semi_join(data_complete_amp, by = "unique_id")
# are there duplicates or incomplete data?
# sanity check should have one row
data_amp_tidied_complete |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
# rm(data_complete_amp) # remove from environment
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
# do we have duplicate data
data_demographics_raw |>
count(subject) |>
arrange(desc(n))
dat_unique_id <- data_demographics_raw |>
rename(unique_id = subject) |>
count(unique_id) |>
filter(n == 2) |>
select(unique_id)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
#select(-item) # alternative: negative selection
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "yes" ~ NA_character_,
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) |>
select(unique_id, gender)
# dat_unique_id
# dat_age
# dat_gender
# basic tidying
data_amp_tidied <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, block_type, rt) |>
filter(block_type == "test")
# are there duplicates or incomplete data?
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_complete_amp <- data_amp_tidied |>
count(unique_id, name = "n_trials") |>
filter(n_trials == 72)
data_amp_tidied_complete <- data_amp_tidied |>
semi_join(data_complete_amp, by = "unique_id")
# are there duplicates or incomplete data?
# sanity check should have one row
data_amp_tidied_complete |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
# rm(data_complete_amp) # remove from environment
data_amp_performance_criteria <- data_amp_tidied_complete |>
mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
# for each participant...
group_by(unique_id) |>
# ... summarize the percent of fast trials
summarise(percent_fast_trials = mean(fast_trial)*100) |>
# flag unique_ids that have too many fast trials
mutate(exclude_amp_performance = ifelse(percent_fast_trials > 10, "exclude", "include"))
#colnames(data_selfreport_raw)
# basic tidying
data_selfreport_tidied <- data_selfreport_raw |>
rename(unique_id = subject,
item_type = trialcode) |>
select(unique_id, item_type, response) |>
filter(item_type != "instructions")
data_selfreport_tidied %>%
count(response)
data_selfreport_tidied %>%
count(response)   # this tells you all the answers that were given and how often
temp <- data_selfreport_tidied %>%
mutate(response = ifelse(response %in% seq(1,7), response, NA))
View(temp)
temp <- data_selfreport_tidied %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA, response))
View(temp)
View(temp)
data_selfreport_tidied %>%
count(response)   # this tells you all the answers that were given and how often
temp <- data_selfreport_tidied %>%
mutate(response = ifelse(response %in% seq(1,7), response, NA))    #  like that we only keep answers with a value from 1 to 7
temp <- data_selfreport_tidied %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA, response)) %>%
mutate(respnse = as.numeric(response)) #  like that we exclude the concrete response we don't want
View(temp)
data_selfreport_tidied %>%
count(response)   # this tells you all the answers that were given and how often
temp <- data_selfreport_tidied %>%
mutate(response = ifelse(response %in% seq(1,7), response, NA))    #  like that we only keep answers with a value from 1 to 7
temp <- data_selfreport_tidied %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA, response)) %>%
mutate(response = as.numeric(response)) #  like that we exclude the concrete response we don't want
View(temp)
data_selfreport_tidied %>%
count(response)   # this tells you all the answers that were given and how often
temp <- data_selfreport_tidied %>%
mutate(response = ifelse(response %in% seq(1,7), response, NA))    #  like that we only keep answers with a value from 1 to 7
temp <- data_selfreport_tidied %>%
mutate(response = ifelse(response == "Ctrl+'B'", NA, response)) %>%
mutate(response = as.numeric(response)) #  like that we exclude the concrete response we don't want
mean(temp$response, na.rm = TRUE)
temp %>%
count(unique_id)
temp %>%
count(unique_id) %>%
count(n)
temp %>%
count(unique_id, name = "n_trials") %>%
count(n_trials, name = "n_participants")
temp %>%
group_by(unique_id) %>%
summarize(n_trials = n())
temp %>%
group_by(unique_id) %>%
summarize(n_trials = n()) %>%
group_by(n_trials) %>%
summarize(n_participants = n())
temp %>%
group_by(unique_id)
mutate(n_trials = n())
temp %>%
group_by(unique_id)
mutate(n_trials = n())
temp2 <- temp %>%
group_by(unique_id) %>%
mutate(n_trials = n()) %>%
filter(n_trials == 3)
View(temp2)
temp2 <- temp %>%
count(unique_id)
View(temp2)
temp2 <- temp %>%
count(unique_id) %>%
filter(n == 3)
View(temp2)
nrow(temp2)
nrow(temp)
?inner_join
